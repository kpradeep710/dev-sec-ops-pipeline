version: 0.2

phases:
  install:
    commands:
      - sudo yum install -y curl bash
      - echo "Installing necessary tools"
      - curl -Lo /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 && chmod +x /usr/local/bin/hadolint
      - curl -Lo /usr/local/bin/kubelinter https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux && chmod +x /usr/local/bin/kubelinter
      - curl -sSL https://raw.githubusercontent.com/anchore/anchore-engine/main/scripts/install.sh | bash
      - curl -sSL https://raw.githubusercontent.com/zaproxy/zaproxy/main/scripts/zap.sh -o /usr/local/bin/zap && chmod +x /usr/local/bin/zap
      - yum install docker -y
  pre_build:
    commands:
      - docker login -u pradeep710 -p Nani@1999 
      - echo "Pulling SonarQube Docker image..."
      - docker pull sonarqube:10.6-community
      - echo "Starting SonarQube container..."
      - docker ps
      - docker run -d --name sonarqube -p 9000:9000 sonarqube:10.6-community
      - docker ps
      - echo "Waiting for SonarQube to be ready..."
      - echo "Installing SonarQube Scanner..."
      - curl -OL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
      - mvn sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
      - export PATH="/opt/sonar-scanner/bin:$PATH"
      - echo "Running SonarQube scan..."
      - sonar-scanner -Dsonar.projectKey=nani-project -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -X || echo "SonarQube scan failed"
      - echo "Linting Dockerfile with Hadolint..."
      - hadolint Dockerfile || echo "Hadolint found issues"
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 970547349158.dkr.ecr.ap-south-1.amazonaws.com
      - REPOSITORY_URI=970547349158.dkr.ecr.ap-south-1.amazonaws.com/dev-sec-ops-repo

  build:
    on-failure: ABORT
    commands:
      - echo "Running Hadolint on Dockerfile"
      - hadolint Dockerfile    
      - docker build -t dev-sec-ops-repo .
      - docker tag dev-sec-ops-repo:latest $REPOSITORY_URI:latest
      - echo "Docker image built successfully."
      - echo "Pushing Docker image to ECR..."
      - docker push 970547349158.dkr.ecr.ap-south-1.amazonaws.com/dev-sec-ops-repo:latest
      - echo "Running Anchore Engine for image scanning"
      - anchore-cli image add dev-sec-ops-repo:latest
      - anchore-cli image wait dev-sec-ops-repo:latest
      - anchore-cli image vuln dev-sec-ops-repo:latest all > anchore-results.json
      - echo "Saving Anchore scan results to S3"
      - aws s3 cp anchore-results.json s3://$S3_BUCKET_NAME/anchore-results.json

  post_build:
    commands:
      - echo "installing minikube..."
      - curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
      - sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
      
      - echo "deleting minikube"
      - minikube delete
      
      - echo "again installing minikube..."
      - curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
      - sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
      
      - echo "installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
      - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      - sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - echo "connecting to cluster..."
      - minikube start --driver=docker --force
      - minikube status
      - kubectl get nodes -o wide
      - echo "Updating Kubernetes deployment..."
      - sed -i "s|nginx|$REPOSITORY_URI:latest|g" deployment.yml
      - kubectl apply -f deployment.yml --validate=false
      - echo "Deployment successful!"
      - echo "Running Kubelinter on Kubernetes manifests"
      - kubelinter lint ./k8s --format json > kubelinter-results.json
      - echo "Saving Kubelinter results to S3"
      - aws s3 cp kubelinter-results.json s3://$S3_BUCKET_NAME/kubelinter-results.json
       - echo "Running OWASP ZAP for DAST"
      - zap -daemon -quickurl $TARGET_URL -quickout zap-results.json
      - echo "Saving OWASP ZAP results to S3"
      - aws s3 cp zap-results.json s3://$S3_BUCKET_NAME/zap-results.json

artifacts:
  files:
    - kubelinter-results.json
    - anchore-results.json
    - zap-results.json
 
   
