version: 0.2

phases:
  install:
    commands:
      - echo "Installing required tools..."
      - yum install -y docker
      - curl -Lo kubelinter.tar.gz https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz
      - tar -xzf kubelinter.tar.gz && mv kube-linter /usr/local/bin/

  pre_build:
    commands:
      - echo "Pulling SonarQube Docker image..."
      - docker pull sonarqube:10.6-community
      - docker login -u pradeep710 -p Nani@1999 || echo "Docker login failed"
      - echo "Starting SonarQube container..."
      - docker ps
      - docker run -d --name sonarqube -p 9000:9000 sonarqube:10.6-community
      - docker ps
      - echo "Waiting for SonarQube to be ready..."
      - echo "Installing SonarQube Scanner..."
      - curl -OL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
      - mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
      - export PATH="/opt/sonar-scanner/bin:$PATH"
      - echo "Running SonarQube scan..."
      - sonar-scanner -Dsonar.projectKey=nani-project -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -X || echo "SonarQube scan failed"
      - echo "Linting Dockerfile with Hadolint..."
      - hadolint Dockerfile || echo "Hadolint found issues"
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 970547349158.dkr.ecr.ap-south-1.amazonaws.com
      - REPOSITORY_URI=970547349158.dkr.ecr.ap-south-1.amazonaws.com/dev-sec-ops-repo

  build:
    on-failure: ABORT
    commands:
      - #LINTING THE DOCKERFILE USING HADOLINT
      - echo "DOCKERFILE LINT STAGE"
      - echo "PRE_BUILD will fail if dockerfile is not secure or linted"
      - echo using Hadolint for Dockerfile linting
      - docker pull hadolint/hadolint
      - docker images
      - docker run --rm -i hadolint/hadolint hadolint -f json - < Dockerfile || echo "Hadolint warnings detected"
      - echo Docker FILE LINT STAGE - PASSED
      - echo "Building Docker image..."
      - docker build -t dev-sec-ops-repo .
      - docker tag dev-sec-ops-repo:latest $REPOSITORY_URI:latest
      - echo "Docker image built successfully."
      - echo "Pushing Docker image to ECR..."
      - docker push 970547349158.dkr.ecr.ap-south-1.amazonaws.com/dev-sec-ops-repo:latest
      - echo "Scanning Docker image with Anchore..."
      - export COMPOSE_INTERACTIVE_NO_CLI=1
      - curl -s https://ci-tools.anchore.io/inline_scan-v0.6.0 | bash -s -- -r $REPOSITORY_URI:latest
      - echo "Scanning Kubernetes Manifests with Kubelinter..."
      - kube-linter lint deployment.yml || echo "Kubelinter found issues"

  post_build:
    commands:
      - echo "installing minikube...."
      - curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
      - sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
      - echo "installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - kubectl version --client
      - echo "connecting to cluster..."
      - minikube start --driver=docker --force
      - minikube status
      - kubectl get nodes -o wide
      - echo "Updating Kubernetes deployment..."
      - sed -i "s|apache2|$REPOSITORY_URI:latest|g" deployment.yml
      - kubectl apply -f deployment.yml --validate=false
      - echo "Deployment successful!"
      - echo "Pulling OWASP ZAP Docker image..."
      - docker pull zaproxy/zap-stable
      - echo "Running OWASP ZAP DAST Scan..."
      - docker run --rm -v $(pwd):/zap/wrk:rw zaproxy/zap-stable zap-baseline.py -t https://your-app-url.com -r zap-report.html || echo "ZAP scan failed"
      - if [ -f "zap-report.html" ]; then aws s3 cp zap-report.html s3://$S3_BUCKET/; else echo "ZAP report not found!"; exit 1; fi
      - echo "DAST scan completed and results uploaded to S3."

artifacts:
  files:
    - zap-report.html
    - imagedefinitions.json
